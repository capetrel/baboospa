@use "sass:math";
$global-font-size: 100% !default;

/*
Remove unit from params
@param {Number} $string - Input number params

@returns {Number} Outpu without unit (px, rem...)
 */
@function strip-unit($number){
    @if type_of($number) == 'number' and not unitless($number){
        @return math.div($number, ($number * 0 + 1));
    }
    @return $number;
}


/*
String replace
@param {String} $string - The string to search in

@param {String} $search - The needle to find

@returns {String} The new string
 */
@function str-replace($string, $search, $replace: "") {
    $index: str_index($string, $search);
    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }
    @return $string;
}


/*
Converts one or more pixel values into matching rem values.
@param {Number|List} $values - One or more values to convert. Be sure to separate them with spaces and not commas. If you need to convert a comma-separated list, wrap the list in parentheses.

@param {Number} $base [null] - The base value to use when calculating the `rem`. If you're using Foundation out of the box, this is 16px. If this parameter is `null`, the function will reference the `$base-font-size` variable as the base.

@returns {List} A list of converted values.
*/
@function toRem($values, $base: null) {
    $rem-values: ();
    $count: length($values);

    // If no base is defined, defer to the global font size
    @if $base == null {
        $base: $global-font-size;
    }

    // If the base font size is a %, then multiply it by 16px This is because 100% font size = 16px in most all browsers
    @if unit($base) == '%' {
        $base: math.div($base, 100%) * 16px;
    }

    // Using rem as base allows correct scaling
    @if unit($base) == 'rem' {
        $base: strip-unit($base) * 16px;
    }

    @if $count == 1 {
        @return -to-rem($values, $base);
    }

    @for $i from 1 through $count {
        $rem-values: append($rem-values, -to-rem(nth($values, $i), $base));
    }

    @return $rem-values;
}

/*
Converts a pixel value to matching rem value. *Any* value passed, regardless of unit, is assumed to be a pixel value. By default, the base pixel value used to calculate the rem value is taken from the `$global-font-size` variable.

@access private
@param {Number} $value - Pixel value to convert.
@param {Number} $base [null] - Base for pixel conversion.

@returns {Number} A number in rems, calculated based on the given value and the base pixel value. rem values are passed through as is.
*/
@function -to-rem($value, $base: null) {
    /* Check if the value is a number */
    @if type-of($value) != 'number' {
        @warn inspect($value) + ' was passed to rem-calc(), which is not a number.';
        @return $value;
    }

    // Transform em into rem if someone hands over 'em's
    @if unit($value) == 'em' {
        $value: strip-unit($value) * 1rem;
    }

    // Calculate rem if units for $value is not rem or em
    @if unit($value) != 'rem' {
        $value: math.div(strip-unit($value), strip-unit($base)) * 1rem;
    }

    // Turn 0rem into 0
    @if $value == 0rem {
        $value: 0;
    }

    @return $value;
}
